/*******************************************************************************
 * Copyright (c) 2000, 2006 IBM Corporation and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     IBM Corporation - initial API and implementation
 *******************************************************************************/
package org.eclipse.help.internal.context;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.eclipse.core.runtime.CoreException;
import org.eclipse.core.runtime.IConfigurationElement;
import org.eclipse.core.runtime.IExtensionRegistry;
import org.eclipse.core.runtime.InvalidRegistryObjectException;
import org.eclipse.core.runtime.Platform;
import org.eclipse.help.AbstractContextProvider;
import org.eclipse.help.IContext;
import org.eclipse.help.internal.HelpPlugin;

public class ContextManager {

	private static final String EXTENSION_POINT_ID_CONTEXT = HelpPlugin.PLUGIN_ID + ".contexts"; //$NON-NLS-1$
	private static final String ELEMENT_NAME_CONTEXT_PROVIDER = "contextProvider"; //$NON-NLS-1$
	private static final String ATTRIBUTE_NAME_CLASS = "class"; //$NON-NLS-1$
	
	private AbstractContextProvider[] contextProviders;

	/*
	 * Dynamic context IDs (generated by help) indexed by dynamic context
	 * objects
	 */
	private Map contextsById = new HashMap();
	private Map idsByContext = new HashMap();
	private int idCounter = 0;

	public String addContext(IContext context) {
		String plugin = HelpPlugin.PLUGIN_ID;
		String id = (String)idsByContext.get(context);
		if (id != null) {
			// context already registered
		} else {
			// generate ID and register the context
			id = "ID" + idCounter++; //$NON-NLS-1$
			idsByContext.put(context, id);
			contextsById.put(id, context);
		}
		return plugin + "." + id; //$NON-NLS-1$
	}
	
	public IContext getContext(String contextId, String locale) {
		IContext dynamicContext = (IContext)contextsById.get(contextId);
		if (dynamicContext != null) {
			return dynamicContext;
		}
		
		AbstractContextProvider[] providers = getContextProviders();
		for (int i=0;i<providers.length;++i) {
			IContext context = null;
			try {
				context = providers[i].getContext(contextId, locale);
				if (context != null) {
					try {
						return ContextPrefetcher.prefetch(context);
					}
					catch (Throwable t) {
						// log and skip
						String msg = "Error querying IContext (" + context.getClass().getName() + ") with context Id " + contextId + " provided by context provider " + providers[i].getClass().getName(); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
						HelpPlugin.logError(msg, t);
					}
				}
			}
			catch (Throwable t) {
				// log and skip
				String msg = "Error querying context provider (" + providers[i].getClass().getName() + ") with context Id: " + contextId; //$NON-NLS-1$ //$NON-NLS-2$
				HelpPlugin.logError(msg, t);
			}
		}
		return null;
	}
	
	/*
	 * Returns all registered context providers (potentially cached).
	 */
	private AbstractContextProvider[] getContextProviders() {
		if (contextProviders == null) {
			List providers = new ArrayList();
			IExtensionRegistry registry = Platform.getExtensionRegistry();
			IConfigurationElement[] elements = registry.getConfigurationElementsFor(EXTENSION_POINT_ID_CONTEXT);
			for (int i=0;i<elements.length;++i) {
				IConfigurationElement elem = elements[i];
				try {
					if (elem.getName().equals(ELEMENT_NAME_CONTEXT_PROVIDER)) {
						String className = elem.getAttribute(ATTRIBUTE_NAME_CLASS);
						if (className != null) {
							try {
								AbstractContextProvider provider = (AbstractContextProvider)elem.createExecutableExtension(ATTRIBUTE_NAME_CLASS);
								providers.add(provider);
							}
							catch (CoreException e) {
								// log and skip
								String msg = "Error instantiating " + ELEMENT_NAME_CONTEXT_PROVIDER + " class"; //$NON-NLS-1$ //$NON-NLS-2$
								HelpPlugin.logError(msg, e);
							}
							catch (ClassCastException e) {
								// log and skip
								String msg = ELEMENT_NAME_CONTEXT_PROVIDER + " class must implement " + AbstractContextProvider.class.getName(); //$NON-NLS-1$
								HelpPlugin.logError(msg, e);
							}
						}
						else {
							// log the missing class attribute and skip
							String msg = ELEMENT_NAME_CONTEXT_PROVIDER + " element of extension point " + EXTENSION_POINT_ID_CONTEXT + " must specify a " + ATTRIBUTE_NAME_CLASS + " attribute"; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
							try {
								msg += " (declared from plug-in " + elem.getNamespaceIdentifier() + ")"; //$NON-NLS-1$ //$NON-NLS-2$
							}
							catch (InvalidRegistryObjectException e) {
								// skip the declaring plugin part
							}
							HelpPlugin.logError(msg, null);
						}
					}
				}
				catch (InvalidRegistryObjectException e) {
					// no longer valid; skip it
				}
			}
			contextProviders = (AbstractContextProvider[])providers.toArray(new AbstractContextProvider[providers.size()]);
		}
		return contextProviders;
	}
}
